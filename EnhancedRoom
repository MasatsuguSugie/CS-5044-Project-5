package adventure;

import java.util.ArrayList;
import java.util.List;

/**
 * This is the enhanced room command class. This extends the room class to add or remove items.
 * 
 * @author sugie
 * @version 25 Oct 2018
 */
public class EnhancedRoom
    extends Room
{
    private List<Item> items;


    /**
     * Create a new EnhancedRoom object.
     * 
     * @param description
     *            of the room.
     */
    public EnhancedRoom(String description)
    {
        super(description);
        items = new ArrayList<>();

    }


    /**
     * This adds an item in the room.
     * 
     * @param item
     *            to be added.
     */
    public void addItem(Item item)
    {
        items.add(item);

    }


    /**
     * This checks if a room has an item.
     * 
     * @param name
     *            of the item to be checked.
     * @return true is a room has an item.
     */
    public boolean hasItem(String name)
    {
        for (Item item : items)
        {
            if (name.equals(item.getName()))
            {
                return true;
            }
        }
        return false;

    }


    /**
     * This gets an item from a room.
     * 
     * @param name
     *            of the item to be gotten.
     * @return item
     */
    public Item getItem(String name)
    {
        for (Item item : items)
        {
            if (name.equals(item.getName()))
            {
                return item;
            }
        }

        return null;

    }


    /**
     * This removes an item from a room.
     * 
     * @param item
     *            to be removed.
     */
    public void removeItem(Item item)
    {
        items.remove(item);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String getLongDescription()
    {
        StringBuilder sb = new StringBuilder();
        sb.append(super.getLongDescription());

        if (!items.isEmpty())
        {
            sb.append("<p>You see ");
            sb.append(Message.commaSeparatedList(Message.getNamesWithArticles(items)));
            sb.append(" here.");
        }
        return sb.toString();

    }
    
    /*
    private Map<String, Item> itemMap;


    /**
     * Create a new EnhancedRoom object.
     * 
     * @param description
     *            of the room.
     
    public EnhancedRoom(String description)
    {
        super(description);
        itemMap = new HashMap<>();

    }


    /**
     * This adds an item in the room.
     * 
     * @param item
     *            to be added.
     
    public void addItem(Item item)
    {
        itemMap.put(item.getName(), item);

    }


    /**
     * This checks if a room has an item.
     * 
     * @param name
     *            of the item to be checked.
     * @return true is a room has an item.
     
    public boolean hasItem(String name)
    {
        itemMap.containsKey(name);

    }


    /**
     * This gets an item from a room.
     * 
     * @param name
     *            of the item to be gotten.
     * @return item
     
    public Item getItem(String name)
    {
        return itemMap.get(name);
    }


    /**
     * This removes an item from a room.
     * 
     * @param name
     *            of item.
     
    public void removeItem(String name)
    {
        itemMap.remove(name);
    }


    /**
     * @return description.
     
    public String getYouSeeItemNames()
    {
        List<String> itemNames = new ArrayList<>();
        for (String name : itemMap.keySet())
        {
            itemNames.add("the " + name);
        }
        return "You see "
            + Message.commaSeparatedList(itemNames.toArray(new String[itemMap.size()])) + "here.";
    }


    @Override
    public String getLongDescription()
    {
        String output = super.getLongDescription();
        if (!itemMap.isEmpty())
        {
            output += "<p>" + getYouSeeItemNames();
        }
        return output;
    }
    */

}
